openapi: 3.0.3
info:
  title: Notification Service API
  version: v1.0.0
  description: API for managing and triggering notifications within the e-commerce platform. Primarily used for administrative, testing, or ad-hoc operational notification needs.
servers:
  - url: http://localhost:3006/api/v1
    description: Local development server for Notification Service
  - url: https://api.example.com/notification/v1 # Example production URL
    description: Production server for Notification Service
tags:
  - name: Notifications
    description: Operations related to triggering and checking the status of notifications.

paths:
  /notifications/send:
    post:
      tags:
        - Notifications
      summary: Manually trigger a notification.
      description: Allows an authorized user or service to send a notification by specifying recipient details (or user ID), a template, and data.
      operationId: sendNotification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualNotificationRequest'
      responses:
        '202':
          description: Notification request accepted for processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSendResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /notifications/status/{notificationAttemptId}:
    get:
      tags:
        - Notifications
      summary: Get the status of a specific notification attempt.
      description: Retrieves the current delivery status and details for a previously dispatched notification attempt.
      operationId: getNotificationStatus
      security:
        - bearerAuth: []
      parameters:
        - name: notificationAttemptId
          in: path
          required: true
          description: Unique identifier of the notification attempt.
          schema:
            type: string
            format: uuid 
            example: "notif-attempt-uuid-123"
      responses:
        '200':
          description: Successfully retrieved notification status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationStatus'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    RecipientDetails:
      type: object
      description: Direct contact details for the recipient.
      properties:
        emailAddress:
          type: string
          format: email
          description: Email address of the recipient.
          example: "user@example.com"
          nullable: true
        phoneNumber:
          type: string
          description: Phone number of the recipient (E.164 format recommended).
          example: "+1234567890"
          nullable: true
        # deviceToken: # Example for push, if direct device targeting is supported by this endpoint
        #   type: string
        #   description: Device token for push notification.
        #   nullable: true
      # No required fields here, validation depends on selected channels

    ManualNotificationRequest:
      type: object
      description: Request to manually send a notification. Either recipientDetails or userId should be provided.
      properties:
        recipientDetails:
          $ref: '#/components/schemas/RecipientDetails'
          nullable: true
        userId:
          type: string
          format: uuid
          description: Unique identifier of the user to notify. If provided, contact details and preferences might be fetched by the service.
          example: "user-uuid-123"
          nullable: true
        templateName:
          type: string
          description: Name or key of the notification template to use.
          example: "custom-admin-alert"
        data:
          type: object
          additionalProperties: true
          description: Data object for template personalization.
          example: {"subject": "Important System Update", "message": "Maintenance window scheduled.", "callToActionLink": "https://status.example.com"}
        channels:
          type: array
          items:
            type: string
            enum: [email, sms, push]
          description: Optional array specifying which channels to use. If omitted, defaults to template's configured channels or all applicable channels based on available recipient details.
          example: ["email", "sms"]
      required:
        - templateName
        - data
      # Server-side validation must ensure that either recipientDetails (with relevant fields for channels) or userId is present.

    NotificationSendResponse:
      type: object
      description: Response after a manual notification request has been accepted.
      properties:
        message:
          type: string
          example: "Notification request accepted for processing."
        notificationRequestIds:
          type: array
          items:
            type: string
            format: uuid
          description: Array of unique identifiers for each notification attempt queued (one per channel if multiple channels used).
          example: ["notif-attempt-uuid-email-123", "notif-attempt-uuid-sms-456"]
      required:
        - message
        - notificationRequestIds

    NotificationStatusEnum: # Defining as a separate enum for clarity in NotificationStatus schema
      type: string
      enum:
        - PENDING # Request accepted, not yet sent to provider
        - PROCESSING # Intermediate state, e.g., handed off to an async internal queue
        - SENT_TO_PROVIDER # Successfully dispatched to the third-party provider (e.g., SES, Twilio, SNS)
        - FAILED_TO_SEND_TO_PROVIDER # Failed to dispatch to the provider
        - DELIVERED_TO_RECIPIENT # Confirmed delivery by provider (if DLRs are processed)
        - FAILED_DELIVERY_TO_RECIPIENT # Confirmed failure by provider (if DLRs are processed)
        - UNKNOWN # Status cannot be determined
      description: Current status of the notification attempt.
      example: SENT_TO_PROVIDER

    NotificationChannelEnum: # Defining as a separate enum
      type: string
      enum: [email, sms, push, unknown]
      description: Channel through which the notification was attempted.
      example: email

    NotificationStatus:
      type: object
      description: Detailed status of a specific notification attempt.
      properties:
        notificationAttemptId:
          type: string
          format: uuid
          description: Unique identifier for this notification attempt.
          example: "notif-attempt-uuid-123"
        status:
          $ref: '#/components/schemas/NotificationStatusEnum'
        channel:
          $ref: '#/components/schemas/NotificationChannelEnum'
        recipient:
          type: string
          description: Masked identifier of the recipient (e.g., u***@example.com, +1234***7890).
          example: "u***@example.com"
        templateName:
          type: string
          description: Name/key of the template used.
          example: "order-confirmation"
        sentAt:
          type: string
          format: date-time
          description: Timestamp when the notification was successfully sent to the provider.
          nullable: true
          example: "2023-10-27T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when this status record was last updated.
          example: "2023-10-27T10:30:05Z"
        providerMessageId:
          type: string
          description: Optional message ID received from the third-party provider.
          nullable: true
          example: "twilio-msg-sid-xyz"
        errorDetails:
          type: string
          description: Details of the error if the notification attempt failed.
          nullable: true
          example: "Provider API error: Invalid phone number."
      required:
        - notificationAttemptId
        - status
        - channel
        - recipient
        - updatedAt

    ErrorResponse:
      type: object
      description: Standard error response structure.
      required:
        - error
        - message
        - statusCode
      properties:
        error:
          type: string
          description: A short error code or type.
          example: "ValidationError"
        message:
          type: string
          description: A human-readable message explaining the error.
          example: "Input validation failed for one or more fields."
        statusCode:
          type: integer
          description: HTTP status code.
          example: 400
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                description: Name of the field that caused the validation error.
                nullable: true
              message:
                type: string
                description: Specific error message for the field.
            required:
              - message
            example: [{"field": "templateName", "message": "templateName is required."}]
          nullable: true
          description: Optional array of detailed error messages, typically for validation errors.
        correlationId:
          type: string
          format: uuid
          description: ID for tracking the request across services.
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          readOnly: true

  responses:
    Accepted:
      description: The request has been accepted for processing.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationSendResponse' # Assuming this is more specific than a generic message
    BadRequest:
      description: Bad Request - Typically a validation error or invalid input.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Unauthorized - Authentication is required and has failed or has not yet been provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Forbidden - The authenticated user/service does not have permission to perform this action.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Not Found - The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: Internal Server Error - An unexpected condition was encountered on the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token for authentication, as per ADR-005.

security:
  - bearerAuth: [] # Applies bearerAuth to all operations by default.The directory `implementation-specs/notification-service/openapi/` and the file `implementation-specs/notification-service/openapi/notification-service.yaml` have been successfully created in the previous turn.

The OpenAPI specification includes:
1.  **`openapi: 3.0.3`**
2.  **`info` object**:
    *   `title: Notification Service API`
    *   `version: v1.0.0`
    *   `description: API for managing and triggering notifications...`
3.  **`servers` array**: Local (`http://localhost:3006/api/v1`) and production URLs.
4.  **`tags` array**: "Notifications" tag.
5.  **`components` object**:
    *   **`schemas`**:
        *   `RecipientDetails` (for `ManualNotificationRequest`).
        *   `ManualNotificationRequest` (with `recipientDetails`, `userId`, `templateName`, `data`, `channels`). The description notes that either `recipientDetails` or `userId` should be provided.
        *   `NotificationSendResponse` (with `message`, `notificationRequestIds` as array of strings).
        *   `NotificationStatusEnum` (PENDING, PROCESSING, SENT_TO_PROVIDER, etc.).
        *   `NotificationChannelEnum` (email, sms, push, unknown).
        *   `NotificationStatus` (with `notificationAttemptId`, `status`, `channel`, `recipient`, `templateName`, `sentAt`, `updatedAt`, `providerMessageId`, `errorDetails`).
        *   `ErrorResponse` (consistent with Inventory Service: `error`, `message`, `statusCode`, `details` array, `correlationId`).
    *   **`securitySchemes`**: `bearerAuth` (HTTP Bearer JWT).
    *   **`responses`**: `Accepted`, `BadRequest`, `Unauthorized`, `Forbidden`, `NotFound`, `InternalServerError`.
6.  **`paths` object**:
    *   **`POST /notifications/send`**:
        *   Tagged, summarized, secured with `bearerAuth`.
        *   Request body references `ManualNotificationRequest`.
        *   Responses: `202 Accepted` (references `NotificationSendResponse`), `400`, `401`, `403`, `500`.
    *   **`GET /notifications/status/{notificationAttemptId}`**:
        *   Tagged, summarized, secured with `bearerAuth`.
        *   Path parameter `notificationAttemptId`.
        *   Responses: `200 OK` (references `NotificationStatus`), `401`, `403`, `404`, `500`.
7.  **Global `security`**: Applies `bearerAuth` to all operations.

The OpenAPI specification aligns with the decisions from `04-api-layer.md` and the prompt's requirements.
